male <- happydb %>%
filter(gender == 'm')
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/senselabel.csv'
sense_data <- read_csv(urlfile)
female_corpus <- Corpus(VectorSource(female$text))
female_dtm <- DocumentTermMatrix(female_corpus)
freq_f <- data.frame(sort(colSums(as.matrix(female_dtm)), decreasing =TRUE))
freq_f <- data.frame(word = rownames(freq_f), Freq = freq_f[,1])
male_corpus <- Corpus(VectorSource(male$text))
male_dtm <- DocumentTermMatrix(male_corpus)
freq_m <- data.frame(sort(colSums(as.matrix(male_dtm)), decreasing =TRUE))
freq_m <- data.frame(word = rownames(freq_m), Freq = freq_m[,1])
diet <- read.csv("Diets.csv")
diet <- read.csv("Diets.csv")
diet <- read.csv("Diets.xlsx")
View(diet)
diet <- readxl::read_xlsx("Diets.xlsx")
View(diet)
diet <- readxl::read_xlsx("Diets.xlsx")
diet$Diet
diet <- readxl::read_xlsx("Diets.xlsx")
diet$Diet
diet$Response
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
anova(response~diet)
?anova
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
reg <- lm(respnse~diet)
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
reg <- lm(response~diet)
anova(reg)
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
data[,2][data[,1]=="1"]
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
data[,2][data[1,]=="1"]
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
summary(data$Response[data$Diet=="1"])
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
summary(data$Response[data$Diet=="1"])
# diet 2
summary(data$Response[data$Diet=="2"])
# diet 3
summary(data$Response[data$Diet=="3"])
# diet 4
summary(data$Response[data$Diet=="4"])
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
summary(data$Response[data$Diet=="1"])
# diet 2
summary(data$Response[data$Diet=="2"])
# diet 3
summary(data$Response[data$Diet=="3"])
# diet 4
summary(data$Response[data$Diet=="4"])
fit <- lm(response~I(diet))
anova()
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
summary(data$Response[data$Diet=="1"])
# diet 2
summary(data$Response[data$Diet=="2"])
# diet 3
summary(data$Response[data$Diet=="3"])
# diet 4
summary(data$Response[data$Diet=="4"])
fit <- lm(response~I(diet))
anova(fit)
View(fit)
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
summary(data$Response[data$Diet=="1"])
# diet 2
summary(data$Response[data$Diet=="2"])
# diet 3
summary(data$Response[data$Diet=="3"])
# diet 4
summary(data$Response[data$Diet=="4"])
fit <- lm(response~diet)
anova(fit)
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
summary(data$Response[data$Diet=="1"])
# diet 2
summary(data$Response[data$Diet=="2"])
# diet 3
summary(data$Response[data$Diet=="3"])
# diet 4
summary(data$Response[data$Diet=="4"])
fit <- lm(response~factor(diet))
anova(fit)
diff <- data$Response[data$Diet=="1"]-data$Response[data$Diet=="2"]
t.test(x = diff, mu = 0, conf.level = 0.95)
View(data)
t <- (mean(diet1)-mean(diet2))/sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
diet1 <- data$Response[data$Diet=="1"]
summary(diet1)
# diet 2
diet2 <- data$Response[data$Diet=="2"]
summary(diet2)
# diet 3
summary(data$Response[data$Diet=="3"])
# diet 4
summary(data$Response[data$Diet=="4"])
# anova table for these 4 diets
fit <- lm(response~factor(diet))
anova(fit)
t <- (mean(diet1)-mean(diet2))/sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
t <- (mean(diet1)-mean(diet2))/sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
t
t <- (mean(diet1)-mean(diet2))/sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
df <- (sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))^2/((sd(diet1)^2/length(diet1))^2/(length(diet1)-1)+(sd(diet2)^2/length(diet2))^2/(length(diet2)-1))
t <- (mean(diet1)-mean(diet2))/sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
df <- (sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))^2/((sd(diet1)^2/length(diet1))^2/(length(diet1)-1)+(sd(diet2)^2/length(diet2))^2/(length(diet2)-1))
t.value <- qt(1-0.05/2,df)
t <- (mean(diet1)-mean(diet2))/sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
df <- (sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))^2/((sd(diet1)^2/length(diet1))^2/(length(diet1)-1)+(sd(diet2)^2/length(diet2))^2/(length(diet2)-1))
t.value <- qt(1-0.05/2,df)
t.value
t <- (mean(diet1)-mean(diet2))/sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
se <- sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2)
df <- (sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))^2/((sd(diet1)^2/length(diet1))^2/(length(diet1)-1)+(sd(diet2)^2/length(diet2))^2/(length(diet2)-1))
t <- (mean(diet1)-mean(diet2))/sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
se <- sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
df <- (sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))^2/((sd(diet1)^2/length(diet1))^2/(length(diet1)-1)+(sd(diet2)^2/length(diet2))^2/(length(diet2)-1))
t.value <- qt(1-0.05/2,df)
se <- sqrt(sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))
df <- (sd(diet1)^2/length(diet1)+sd(diet2)^2/length(diet2))^2/((sd(diet1)^2/length(diet1))^2/(length(diet1)-1)+(sd(diet2)^2/length(diet2))^2/(length(diet2)-1))
t.value <- qt(1-0.05/2,df)
lower <- mean(diet1)-mean(diet2) - t.value*se
upper <- mean(diet1)-mean(diet2) + t.value*se
CI <- c(lower,upper)
CI
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
diet1 <- data$Response[data$Diet=="1"]
summary(diet1)
# diet 2
diet2 <- data$Response[data$Diet=="2"]
summary(diet2)
# diet 3
diet3 <- data$Response[data$Diet=="3"]
summary(die3)
data <- readxl::read_xlsx("Diets.xlsx")
diet <-data$Diet
response <- data$Response
# diet 1
diet1 <- data$Response[data$Diet=="1"]
summary(diet1)
# diet 2
diet2 <- data$Response[data$Diet=="2"]
summary(diet2)
# diet 3
diet3 <- data$Response[data$Diet=="3"]
summary(diet3)
# diet 4
diet4 <- data$Response[data$Diet=="4"]
summary(diet4)
# anova table for these 4 diets
fit <- lm(response~factor(diet))
anova(fit)
D <- c(rep(1,length(diet1)),rep(1,length(diet1)),rep(1,length(diet3)),rep(-1,length(diet4)))
View(data)
D <- c(rep(1,length(diet1)),rep(1,length(diet2)),rep(1,length(diet3)),rep(-1,length(diet4)))
D <- c(rep(1,length(diet1)),rep(1,length(diet2)),rep(1,length(diet3)),rep(-1,length(diet4)))
fit2 <- lm(response ~ D)
D <- c(rep(1,length(diet1)),rep(1,length(diet2)),rep(1,length(diet3)),rep(-1,length(diet4)))
fit2 <- lm(response ~ D)
summary(fit2)
D1 <- rep(0,length(diet))
D1[diet=="1"] <- 1
D1[diet=="4"] <- -1
D2 <- rep(0,length(diet))
D2[diet=="2"] <- 1
D2[diet=="4"] <- -1
D3 <- rep(0,length(diet))
D3[diet=="3"] <- 1
D3[diet=="4"] <- -1
cbind(D1,D2,D3)
D1 <- rep(0,length(diet))
D1[diet=="1"] <- 1
D1[diet=="4"] <- -1
D2 <- rep(0,length(diet))
D2[diet=="2"] <- 1
D2[diet=="4"] <- -1
D3 <- rep(0,length(diet))
D3[diet=="3"] <- 1
D3[diet=="4"] <- -1
cbind(D1,D2,D3)
fit2 <- lm(response ~ D1+D2+D3)
D1 <- rep(0,length(diet))
D1[diet=="1"] <- 1
D1[diet=="4"] <- -1
D2 <- rep(0,length(diet))
D2[diet=="2"] <- 1
D2[diet=="4"] <- -1
D3 <- rep(0,length(diet))
D3[diet=="3"] <- 1
D3[diet=="4"] <- -1
id_matrix <- cbind(D1,D2,D3)
head(id_matrix)
fit2 <- lm(response ~ D1+D2+D3)
summary(fit2)
D1 <- rep(0,length(diet))
D1[diet=="1"] <- 1
D1[diet=="4"] <- -1
D2 <- rep(0,length(diet))
D2[diet=="2"] <- 1
D2[diet=="4"] <- -1
D3 <- rep(0,length(diet))
D3[diet=="3"] <- 1
D3[diet=="4"] <- -1
id_matrix <- cbind(D1,D2,D3)
head(id_matrix)
fit2 <- lm(response ~ D1+D2+D3)
summary(fit2)
-0.11955+0.02783-0.11289
-(-0.11955+0.02783-0.11289)
SSE <- 28.10-23.43                                                                                  SSE
SSE<-28.10-23.43                                                                                  SSE
SSE<-28.10-23.43
SSE
23.43/9
4.67/7
23.43/2
4.67/7
F <- 11.715/0.6671429
F
F <- 11.715/0.6671429
F
F <- 11.715/0.6671429
F
F.stats <- 11.715/0.6671429
F.stats
?qf
qf(1-0.05,2,7)
F.value <- qf(1-0.05,2,7)
F.value
pf(q=17.55996, df1=2, df2=7, lower.tail=FALSE)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shiny")
shiny::runApp('Desktop/example')
runApp('Desktop/example')
runApp('Desktop/example')
runApp('Downloads/App-1')
runApp('Downloads/App-1')
knitr::opts_chunk$set(echo = TRUE)
fluidPage(
tabsetPanel(
tabPanel('server.R',
code('library(shiny)
shinyServer(function(input, output) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
})')),
tabPanel('ui.R',
code('
shinyUI(
fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
))
'))
)
)
# ui.R
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
#server.R
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
# ui
fluidPage(
sidebarPanel(
h3("Action button"),
actionButton("action", label = "Action"),
hr(),
p("Current Value:", style = "color:#888888;"),
verbatimTextOutput("action")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("server.R",
code('library(shiny)
shinyServer(function(input, output) {
output$action=renderPrint({ input$action })
})')
),
tabPanel("ui.R",
code('shinyUI(
fluidPage(
wellPanel(
h3("Action button"),
actionButton("action", label = "Action"),
hr(),
p("Current Value:", style = "color:#888888;"),
verbatimTextOutput("action")
)
)
)')
))
)
)
#server
output$action=renderPrint({ input$action })
fluidPage(
sidebarPanel(
h3("Single checkbox"),
checkboxInput("checkbox", label = "Choice A",
value = TRUE),
hr(),
p("Current Value:", style = "color:#888888;"),
verbatimTextOutput("checkbox")
),
mainPanel(
tabsetPanel(
tabPanel('server.R',
code('library(shiny)
shinyServer(function(input, output) {
output$checkbox <- renderPrint({ input$checkbox })
})')),
tabPanel('ui.R',
code('shinyUI(
fluidPage(
wellPanel(
h3("Single checkbox"),
checkboxInput("checkbox", label = "Choice A",
value = TRUE),
hr(),
verbatimTextOutput("checkbox"),
)
)
)')
)
)
)
)
output$checkbox <- renderPrint({ input$checkbox })
fluidPage(
sidebarPanel(
sliderInput("slider1", label = h3("Slider"), min = 0, max = 100,
value = 50),
hr(),
p("Current Value:", style = "color:#888888;"),
verbatimTextOutput("slider1")),
mainPanel(
tabsetPanel(
tabPanel('server.R',
code('library(shiny)
shinyServer(function(input, output) {
output$slider1 <- renderPrint({ input$slider1 })
})')
),
tabPanel('ui.R',
code('shinyUI(
fluidPage(
wellPanel(
sliderInput("slider1", label = h3("Slider"), min = 0, max = 100,
value = 50),
hr(),
p("Current Value:", style = "color:#888888;"),
verbatimTextOutput("slider1")
)
)
)')
)
)
)
)
output$slider1 <- renderPrint({ input$slider1 })
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
knitr::opts_chunk$set(echo = TRUE)
setwd('~/Desktop/Advanced Data Analysis')
library(readxl)
df <- read_xlsx('HW2(Diets).xlsx')
library(readxl)
df <- read_xlsx('Diets.xlsx')
shiny::runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
shiny::runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
runApp('Documents/GitHub/Spring2019-Proj2-grp1/app')
shiny::runApp()
install.package("ggmap")
install.packages("ggmap")
runApp()
install.packages("geosphere")
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("googleway")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
